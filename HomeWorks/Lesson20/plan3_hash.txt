                                                                                                                                              QUERY PLAN                                                                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=88.05..88.07 rows=5 width=118) (actual time=0.449..0.451 rows=6 loops=1)
   Output: (to_char(f.scheduled_departure, 'DD.MM.YYYY'::text)), (((((ml.city ->> lang()) || ' ('::text) || (f.departure_airport)::text) || ')'::text)), (((((ml_1.city ->> lang()) || ' ('::text) || (f.arrival_airport)::text) || ')'::text)), tf.fare_conditions, tf.amount, f.scheduled_departure
   Sort Key: f.scheduled_departure
   Sort Method: quicksort  Memory: 25kB
   ->  Nested Loop  (cost=1.00..87.99 rows=5 width=118) (actual time=0.260..0.420 rows=6 loops=1)
         Output: to_char(f.scheduled_departure, 'DD.MM.YYYY'::text), ((((ml.city ->> lang()) || ' ('::text) || (f.departure_airport)::text) || ')'::text), ((((ml_1.city ->> lang()) || ' ('::text) || (f.arrival_airport)::text) || ')'::text), tf.fare_conditions, tf.amount, f.scheduled_departure
         Inner Unique: true
         ->  Nested Loop  (cost=0.85..84.55 rows=5 width=79) (actual time=0.058..0.192 rows=6 loops=1)
               Output: tf.fare_conditions, tf.amount, f.scheduled_departure, f.departure_airport, f.arrival_airport, ml.city
               Inner Unique: true
               ->  Nested Loop  (cost=0.71..83.75 rows=5 width=30) (actual time=0.050..0.175 rows=6 loops=1)
                     Output: tf.fare_conditions, tf.amount, f.scheduled_departure, f.departure_airport, f.arrival_airport
                     Inner Unique: true
                     ->  Append  (cost=0.42..42.21 rows=5 width=18) (actual time=0.035..0.142 rows=6 loops=1)
                           ->  Index Scan using ticket_flights_hashed_p0_pkey on bookings.ticket_flights_hashed_p0 tf_1  (cost=0.42..8.44 rows=1 width=18) (actual time=0.035..0.036 rows=1 loops=1)
                                 Output: tf_1.fare_conditions, tf_1.amount, tf_1.flight_id
                                 Index Cond: (tf_1.ticket_no = '0005432661915'::bpchar)
                           ->  Index Scan using ticket_flights_hashed_p1_pkey on bookings.ticket_flights_hashed_p1 tf_2  (cost=0.42..8.44 rows=1 width=18) (actual time=0.028..0.029 rows=1 loops=1)
                                 Output: tf_2.fare_conditions, tf_2.amount, tf_2.flight_id
                                 Index Cond: (tf_2.ticket_no = '0005432661915'::bpchar)
                           ->  Index Scan using ticket_flights_hashed_p2_pkey on bookings.ticket_flights_hashed_p2 tf_3  (cost=0.42..8.44 rows=1 width=18) (actual time=0.020..0.020 rows=0 loops=1)
                                 Output: tf_3.fare_conditions, tf_3.amount, tf_3.flight_id
                                 Index Cond: (tf_3.ticket_no = '0005432661915'::bpchar)
                           ->  Index Scan using ticket_flights_hashed_p3_pkey on bookings.ticket_flights_hashed_p3 tf_4  (cost=0.42..8.44 rows=1 width=18) (actual time=0.026..0.027 rows=1 loops=1)
                                 Output: tf_4.fare_conditions, tf_4.amount, tf_4.flight_id
                                 Index Cond: (tf_4.ticket_no = '0005432661915'::bpchar)
                           ->  Index Scan using ticket_flights_hashed_p4_pkey on bookings.ticket_flights_hashed_p4 tf_5  (cost=0.42..8.44 rows=1 width=18) (actual time=0.022..0.029 rows=3 loops=1)
                                 Output: tf_5.fare_conditions, tf_5.amount, tf_5.flight_id
                                 Index Cond: (tf_5.ticket_no = '0005432661915'::bpchar)
                     ->  Index Scan using flights_pkey on bookings.flights f  (cost=0.29..8.31 rows=1 width=20) (actual time=0.005..0.005 rows=1 loops=6)
                           Output: f.flight_id, f.flight_no, f.scheduled_departure, f.scheduled_arrival, f.departure_airport, f.arrival_airport, f.status, f.aircraft_code, f.actual_departure, f.actual_arrival
                           Index Cond: (f.flight_id = tf.flight_id)
               ->  Index Scan using airports_data_pkey on bookings.airports_data ml  (cost=0.14..0.16 rows=1 width=53) (actual time=0.002..0.002 rows=1 loops=6)
                     Output: ml.airport_code, ml.airport_name, ml.city, ml.coordinates, ml.timezone
                     Index Cond: (ml.airport_code = f.departure_airport)
         ->  Index Scan using airports_data_pkey on bookings.airports_data ml_1  (cost=0.14..0.16 rows=1 width=53) (actual time=0.002..0.002 rows=1 loops=6)
               Output: ml_1.airport_code, ml_1.airport_name, ml_1.city, ml_1.coordinates, ml_1.timezone
               Index Cond: (ml_1.airport_code = f.arrival_airport)
 Planning Time: 1.525 ms
 Execution Time: 1.140 ms
(40 rows)

